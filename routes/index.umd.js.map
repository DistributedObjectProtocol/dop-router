{"version":3,"file":"index.umd.js","sources":["../node_modules/route-parser/lib/route/compiled-grammar.js","../node_modules/route-parser/lib/route/nodes.js","../node_modules/route-parser/lib/route/parser.js","../node_modules/route-parser/lib/route/visitors/create_visitor.js","../node_modules/route-parser/lib/route/visitors/regexp.js","../node_modules/route-parser/lib/route/visitors/reverse.js","../node_modules/route-parser/lib/route.js","../src/routes/index.js"],"sourcesContent":["/* parser generated by jison 0.4.17 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[5,11,12,13,14,15];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"root\":3,\"expressions\":4,\"EOF\":5,\"expression\":6,\"optional\":7,\"literal\":8,\"splat\":9,\"param\":10,\"(\":11,\")\":12,\"LITERAL\":13,\"SPLAT\":14,\"PARAM\":15,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",11:\"(\",12:\")\",13:\"LITERAL\",14:\"SPLAT\",15:\"PARAM\"},\nproductions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[7,3],[8,1],[9,1],[10,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\nreturn new yy.Root({},[$$[$0-1]])\nbreak;\ncase 2:\nreturn new yy.Root({},[new yy.Literal({value: ''})])\nbreak;\ncase 3:\nthis.$ = new yy.Concat({},[$$[$0-1],$$[$0]]);\nbreak;\ncase 4: case 5:\nthis.$ = $$[$0];\nbreak;\ncase 6:\nthis.$ = new yy.Literal({value: $$[$0]});\nbreak;\ncase 7:\nthis.$ = new yy.Splat({name: $$[$0]});\nbreak;\ncase 8:\nthis.$ = new yy.Param({name: $$[$0]});\nbreak;\ncase 9:\nthis.$ = new yy.Optional({},[$$[$0-1]]);\nbreak;\ncase 10:\nthis.$ = yytext;\nbreak;\ncase 11: case 12:\nthis.$ = yytext.slice(1);\nbreak;\n}\n},\ntable: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:$V0,13:$V1,14:$V2,15:$V3},{1:[3]},{5:[1,13],6:14,7:5,8:6,9:7,10:8,11:$V0,13:$V1,14:$V2,15:$V3},{1:[2,2]},o($V4,[2,4]),o($V4,[2,5]),o($V4,[2,6]),o($V4,[2,7]),o($V4,[2,8]),{4:15,6:4,7:5,8:6,9:7,10:8,11:$V0,13:$V1,14:$V2,15:$V3},o($V4,[2,10]),o($V4,[2,11]),o($V4,[2,12]),{1:[2,1]},o($V4,[2,3]),{6:14,7:5,8:6,9:7,10:8,11:$V0,12:[1,16],13:$V1,14:$V2,15:$V3},o($V4,[2,9])],\ndefaultActions: {3:[2,2],13:[2,1]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        function _parseError (msg, hash) {\n            this.message = msg;\n            this.hash = hash;\n        }\n        _parseError.prototype = Error;\n\n        throw new _parseError(str, hash);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return \"(\";\nbreak;\ncase 1:return \")\";\nbreak;\ncase 2:return \"SPLAT\";\nbreak;\ncase 3:return \"PARAM\";\nbreak;\ncase 4:return \"LITERAL\";\nbreak;\ncase 5:return \"LITERAL\";\nbreak;\ncase 6:return \"EOF\";\nbreak;\n}\n},\nrules: [/^(?:\\()/,/^(?:\\))/,/^(?:\\*+\\w+)/,/^(?::+\\w+)/,/^(?:[\\w%\\-~\\n]+)/,/^(?:.)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = parser;\nexports.Parser = parser.Parser;\nexports.parse = function () { return parser.parse.apply(parser, arguments); };\n}","'use strict';\n/** @module route/nodes */\n\n\n/**\n * Create a node for use with the parser, giving it a constructor that takes\n * props, children, and returns an object with props, children, and a\n * displayName.\n * @param  {String} displayName The display name for the node\n * @return {{displayName: string, props: Object, children: Array}}\n */\nfunction createNode(displayName) {\n  return function(props, children) {\n    return {\n      displayName: displayName,\n      props: props,\n      children: children || []\n    };\n  };\n}\n\nmodule.exports = {\n  Root: createNode('Root'),\n  Concat: createNode('Concat'),\n  Literal: createNode('Literal'),\n  Splat: createNode('Splat'),\n  Param: createNode('Param'),\n  Optional: createNode('Optional')\n};\n","/**\n * @module route/parser\n */\n'use strict';\n\n/** Wrap the compiled parser with the context to create node objects */\nvar parser = require('./compiled-grammar').parser;\nparser.yy = require('./nodes');\nmodule.exports = parser;\n","'use strict';\n/**\n * @module route/visitors/create_visitor\n */\n\nvar nodeTypes = Object.keys(require('../nodes'));\n\n/**\n * Helper for creating visitors. Take an object of node name to handler\n * mappings, returns an object with a \"visit\" method that can be called\n * @param  {Object.<string,function(node,context)>} handlers A mapping of node\n * type to visitor functions\n * @return {{visit: function(node,context)}}  A visitor object with a \"visit\"\n * method that can be called on a node with a context\n */\nfunction createVisitor(handlers) {\n  nodeTypes.forEach(function(nodeType) {\n    if( typeof handlers[nodeType] === 'undefined') {\n      throw new Error('No handler defined for ' + nodeType.displayName);\n    }\n\n  });\n\n  return {\n    /**\n     * Call the given handler for this node type\n     * @param  {Object} node    the AST node\n     * @param  {Object} context context to pass through to handlers\n     * @return {Object}\n     */\n    visit: function(node, context) {\n      return this.handlers[node.displayName].call(this,node, context);\n    },\n    handlers: handlers\n  };\n}\n\nmodule.exports = createVisitor;","'use strict';\n\nvar createVisitor  = require('./create_visitor'),\n    escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n/**\n * @class\n * @private\n */\nfunction Matcher(options) {\n  this.captures = options.captures;\n  this.re = options.re;\n}\n\n/**\n * Try matching a path against the generated regular expression\n * @param  {String} path The path to try to match\n * @return {Object|false}      matched parameters or false\n */\nMatcher.prototype.match = function (path) {\n  var match = this.re.exec(path),\n      matchParams = {};\n\n  if( !match ) {\n    return;\n  }\n\n  this.captures.forEach( function(capture, i) {\n    if( typeof match[i+1] === 'undefined' ) {\n      matchParams[capture] = undefined;\n    }\n    else {\n      matchParams[capture] = decodeURIComponent(match[i+1]);\n    }\n  });\n\n  return matchParams;\n};\n\n/**\n * Visitor for the AST to create a regular expression matcher\n * @class RegexpVisitor\n * @borrows Visitor-visit\n */\nvar RegexpVisitor = createVisitor({\n  'Concat': function(node) {\n    return node.children\n      .reduce(\n        function(memo, child) {\n          var childResult = this.visit(child);\n          return {\n            re: memo.re + childResult.re,\n            captures: memo.captures.concat(childResult.captures)\n          };\n        }.bind(this),\n        {re: '', captures: []}\n      );\n  },\n  'Literal': function(node) {\n    return {\n      re: node.props.value.replace(escapeRegExp, '\\\\$&'),\n      captures: []\n    };\n  },\n\n  'Splat': function(node) {\n    return {\n      re: '([^?]*?)',\n      captures: [node.props.name]\n    };\n  },\n\n  'Param': function(node) {\n    return {\n      re: '([^\\\\/\\\\?]+)',\n      captures: [node.props.name]\n    };\n  },\n\n  'Optional': function(node) {\n    var child = this.visit(node.children[0]);\n    return {\n      re: '(?:' + child.re + ')?',\n      captures: child.captures\n    };\n  },\n\n  'Root': function(node) {\n    var childResult = this.visit(node.children[0]);\n    return new Matcher({\n      re: new RegExp('^' + childResult.re + '(?=\\\\?|$)' ),\n      captures: childResult.captures\n    });\n  }\n});\n\nmodule.exports = RegexpVisitor;","'use strict';\n\nvar createVisitor  = require('./create_visitor');\n\n/**\n * Visitor for the AST to construct a path with filled in parameters\n * @class ReverseVisitor\n * @borrows Visitor-visit\n */\nvar ReverseVisitor = createVisitor({\n  'Concat': function(node, context) {\n    var childResults =  node.children\n      .map( function(child) {\n        return this.visit(child,context);\n      }.bind(this));\n\n    if( childResults.some(function(c) { return c === false; }) ) {\n      return false;\n    }\n    else {\n      return childResults.join('');\n    }\n  },\n\n  'Literal': function(node) {\n    return decodeURI(node.props.value);\n  },\n\n  'Splat': function(node, context) {\n    if( context[node.props.name] ) {\n      return context[node.props.name];\n    }\n    else {\n      return false;\n    }\n  },\n\n  'Param': function(node, context) {\n    if( context[node.props.name] ) {\n      return context[node.props.name];\n    }\n    else {\n      return false;\n    }\n  },\n\n  'Optional': function(node, context) {\n    var childResult = this.visit(node.children[0], context);\n    if( childResult ) {\n      return childResult;\n    }\n    else {\n      return '';\n    }\n  },\n\n  'Root': function(node, context) {\n    context = context || {};\n    var childResult = this.visit(node.children[0], context);\n    if( !childResult ) {\n      return false;\n    }\n    return encodeURI(childResult);\n  }\n});\n\nmodule.exports = ReverseVisitor;","'use strict';\nvar Parser = require('./route/parser'),\n    RegexpVisitor = require('./route/visitors/regexp'),\n    ReverseVisitor = require('./route/visitors/reverse');\n\nRoute.prototype = Object.create(null)\n\n/**\n * Match a path against this route, returning the matched parameters if\n * it matches, false if not.\n * @example\n * var route = new Route('/this/is/my/route')\n * route.match('/this/is/my/route') // -> {}\n * @example\n * var route = new Route('/:one/:two')\n * route.match('/foo/bar/') // -> {one: 'foo', two: 'bar'}\n * @param  {string} path the path to match this route against\n * @return {(Object.<string,string>|false)} A map of the matched route\n * parameters, or false if matching failed\n */\nRoute.prototype.match = function(path) {\n  var re = RegexpVisitor.visit(this.ast),\n      matched = re.match(path);\n\n  return matched ? matched : false;\n\n};\n\n/**\n * Reverse a route specification to a path, returning false if it can't be\n * fulfilled\n * @example\n * var route = new Route('/:one/:two')\n * route.reverse({one: 'foo', two: 'bar'}) -> '/foo/bar'\n * @param  {Object} params The parameters to fill in\n * @return {(String|false)} The filled in path\n */\nRoute.prototype.reverse = function(params) {\n  return ReverseVisitor.visit(this.ast, params);\n};\n\n/**\n * Represents a route\n * @example\n * var route = Route('/:foo/:bar');\n * @example\n * var route = Route('/:foo/:bar');\n * @param {string} spec -  the string specification of the route.\n *     use :param for single portion captures, *param for splat style captures,\n *     and () for optional route branches\n * @constructor\n */\nfunction Route(spec) {\n  var route;\n  if (this) {\n    // constructor called with new\n    route = this;\n  } else {\n    // constructor called as a function\n    route = Object.create(Route.prototype);\n  }\n  if( typeof spec === 'undefined' ) {\n    throw new Error('A route spec is required');\n  }\n  route.spec = spec;\n  route.ast = Parser.parse(spec);\n  return route;\n}\n\nmodule.exports = Route;","import Route from 'route-parser'\n\nexport function createGroup() {\n    const routes = []\n    const add = route => {\n        if (typeof route == 'function') {\n            routes.push(route)\n            return route\n        }\n        return false\n    }\n    const remove = route => {\n        const index = routes.indexOf(route)\n        if (index > -1) {\n            routes.splice(routes.indexOf(route), 1)\n            return route\n        }\n        return false\n    }\n    const getRoute = path => {\n        for (let index = 0; index < routes.length; index++) {\n            if (routes[index].match(path)) {\n                return routes[index]\n            }\n        }\n        return false\n    }\n    const getParams = path => {\n        const params = {}\n        for (let index = 0; index < routes.length; index++) {\n            const matches = routes[index].match(path)\n            if (matches !== false)\n                for (let param in matches)\n                    if (typeof matches[param] == 'string')\n                        params[param] = matches[param]\n        }\n        return params\n    }\n    return {\n        routes,\n        add,\n        remove,\n        getRoute,\n        getParams\n    }\n}\n\nexport function createRoute(path_user) {\n    const route = new Route(path_user)\n    const f = params => route.reverse(params)\n    f.match = path => route.match(getDefaultPathname(path))\n    f.route = route\n    return f\n}\n\nfunction getDefaultPathname(route) {\n    return typeof route != 'string' &&\n        typeof window != 'undefined' &&\n        typeof window.location != 'undefined'\n        ? window.location.href.slice(location.origin.length)\n        : route\n}\n\n// https://github.com/rcs/route-parser\n// https://github.com/snd/url-pattern\n// https://github.com/troch/path-parser\n"],"names":["parser","o","k","v","l","length","$V0","$V1","$V2","$V3","$V4","trace","error","root","expressions","EOF","expression","optional","literal","splat","param","(",")","LITERAL","SPLAT","PARAM","$accept","$end","2","5","11","12","13","14","15","yytext","yyleng","yylineno","yy","yystate","$$","_$","$0","Root","Literal","value","$","Concat","Splat","name","Param","Optional","slice","3","4","6","7","8","9","10","1","str","hash","recoverable","_parseError","msg","message","prototype","Error","input","self","this","stack","vstack","lstack","table","args","call","arguments","lexer","Object","create","sharedState","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","parseError","getPrototypeOf","symbol","preErrorSymbol","state","action","r","p","len","newState","expected","lex","token","symbols_","yyval","defaultActions","errStr","terminals_","showPosition","join","match","Array","productions_","first_line","last_line","first_column","last_column","range","performAction","apply","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","split","substr","oldLines","backtrack_lexer","n","unput","past","replace","next","pre","pastInput","c","upcomingInput","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","test_match","flex","condition","pop","conditions","Math","abs","begin","yy_","$avoiding_name_collisions","YY_START","INITIAL","inclusive","Parser","parse","createNode","displayName","props","children","module","require","nodeTypes","keys","handlers","forEach","nodeType","node","context","createVisitor","Matcher","captures","re","path","exec","matchParams","capture","undefined","decodeURIComponent","reduce","memo","child","childResult","visit","bind","escapeRegExp","RegExp","childResults","map","some","decodeURI","encodeURI","Route","spec","route","ast","RegexpVisitor","reverse","params","ReverseVisitor","routes","indexOf","splice","path_user","f","window","location","href","origin","getDefaultPathname"],"mappings":"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"}